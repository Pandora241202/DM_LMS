generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthenticatedUser {
  id          Int         @id @default(autoincrement())
  email       String
  name        String
  birth       BigInt
  gender      GenderType  @default(UNKNOWN)
  language    String
  lastLogin   BigInt      @map("last_login")
  lastLogout  BigInt      @map("last_logout")
  password    String
  username    String
  refeshToken String?     @map("refesh_token")
  state       Boolean     @default(true)
  accountType AccountType

  Forum    Forum[]
  Statement  Statement[]
  Dataset    Dataset[]
  Model      Model[]
  Framework  Framework[]
  Role       Role[]
  Permission Permission[]
  Learner    Learner[]

  @@map("authenticated_user")
}

model Learner {
  id                  Int                     @id @default(autoincrement())
  activeReflective    Int                     @map("active_reflective")
  sensitiveIntuitive  Int                     @map("sensitive_intuitive")
  visualVerbal        Int                     @map("visual_verbal")
  globalSequential    Int                     @map("global_sequence")
  backgroundKnowledge BackgroundKnowledgeType @map("background_knowledge")
  qualification       QualificationType

  user   AuthenticatedUser @relation(fields: [userId], references: [id])
  userId Int

  learningPath   LearningPath? @relation(fields: [learningPathId], references: [id])
  learningPathId Int?

  Practice Practice[]

  log LearnerLog[]

  @@map("learners")
}

model LearningMaterial {
  id         Int                  @id @default(autoincrement())
  name       String
  difficulty Float
  type       LearningMaterialType
  rating     Float
  score      Float
  time       Float?

  LearnerLog   LearnerLog[]
  LearningPath LearningPath[]
  Topic        Topic[]
  Exercise     Exercise[]
  Other        Other[]

  @@map("learning_materials")
}

model Course {
  id           Int     @id @default(autoincrement())
  idInstructor Int     @map("id_instructor")
  name         String
  visibility   Boolean
  level        String
  description  String
  amountOfTime Int     @map("amount_of_time")

  Lesson Lesson[]

  @@map("courses")
}

model Lesson {
  id    Int    @id @default(autoincrement())
  title String

  Course Course[]
  Topic  Topic[]

  @@map("lessons")
}

model Topic {
  id    Int    @id @default(autoincrement())
  title String

  Lesson           Lesson[]
  LearningMaterial LearningMaterial[]

  @@map("topics")
}

model Exercise {
  id Int @id @default(autoincrement())

  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id])
  learningMaterialId Int

  Practice Practice[]

  @@map("exercises")
}

model Other {
  id      Int                  @id @default(autoincrement())
  type    LearningMaterialType
  content String

  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id])
  learningMaterialId Int

  @@map("others")
}

model Code {
  id       Int    @id @default(autoincrement())
  question String
  answer   String

  @@map("codes")
}

model Quizz {
  id               Int       @id @default(autoincrement())
  question         String
  choice           String[]
  answer           Boolean[]
  duration         BigInt
  shuffleQuestions Boolean   @map("shuffle_question")

  @@map("quizzes")
}

model Practice {
  id       Int    @id @default(autoincrement())
  attempt  Int
  answer   String
  language String

  learner   Learner @relation(fields: [learnerId], references: [id])
  learnerId Int

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  @@map("practices")
}

model LearnerLog {
  id                           Int @id @default(autoincrement())
  learningMaterialVisittedTime Int @map("learning_material_visitted_time")
  learningMaterialRating       Int @map("learning_material_rating")

  score    Float
  time     BigInt
  attempts Int

  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id])
  learningMaterialId Int              @map("learning_material_id")
  learner            Learner?         @relation(fields: [learnerId], references: [id])
  learnerId          Int?             @map("learner_id")

  @@map("learner_logs")
}

model LearningPath {
  id                    Int     @id @default(autoincrement())
  learningMaterialOrder Int     @map("learning_material_order")
  learned               Boolean

  learningMaterial LearningMaterial[]
  Learner          Learner[]

  @@map("learning_paths")
}

model Forum {
  id    Int            @id @default(autoincrement())
  title String
  label String[]
  shortDescription String
  content String
  coverImage String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  authenticatedUser AuthenticatedUser @relation(fields: [userId], references: [id])
  userId Int

  Statement Statement[]

  @@map("forums")
}

model Statement {
  id Int @id @default(autoincrement())
  content String
  updated_at DateTime @default(now())

  forum   Forum @relation(fields: [forumId], references: [id])
  forumId Int

  authenticatedUser   AuthenticatedUser @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int

  preStatement Statement?   @relation("pre_order", fields: [statementId], references: [id])
  Statement    Statement[] @relation("pre_order")
  statementId  Int?

  @@map("statements")
}

model Role {
  id   Int    @id @default(autoincrement())
  role String

  AuthenticatedUser   AuthenticatedUser? @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int?               @map("authenticated_user_id")

  @@map("roles")
}

model Permission {
  id         Int    @id @default(autoincrement())
  permission String

  AuthenticatedUser   AuthenticatedUser? @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int?               @map("authenticated_user_id")

  @@map("permissions")
}

model Dataset {
  id          Int     @id @default(autoincrement())
  description String
  content     String
  status      Boolean

  authenticatedUser   AuthenticatedUser @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int               @map("authenticated_user_id")
  Model               Model[]

  @@map("datasets")
}

model Model {
  id             Int     @id @default(autoincrement())
  modelAttribute String  @map("model_attribute")
  content        String
  status         Boolean

  authenticatedUser   AuthenticatedUser @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int               @map("authenticated_user_id")

  dataset   Dataset @relation(fields: [datasetId], references: [id])
  datasetId Int

  @@map("models")
}

model Framework {
  id                  Int    @id @default(autoincrement())
  description         String
  usedTimes           Int    @map("used_times")
  programmingLanguage String @map("programming_language")
  content             String

  authenticatedUser   AuthenticatedUser @relation(fields: [authenticatedUserId], references: [id])
  authenticatedUserId Int               @map("authenticated_user_id")

  @@map("frameworks")
}

enum LearningMaterialType {
  PDF
  VIDEO
  QUIZZ
}

enum AccountType {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum GenderType {
  MALE
  FEMALE
  UNKNOWN
}

enum BackgroundKnowledgeType {
  BASIC
  INTERMEDIA
  EXPERT
}

enum QualificationType {
  HIGH_SCHOOL
  GRADUATE
  POST_GRADUATE
}
